datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
  BETA
}

model User {
  id                         String          @id @default(cuid())
  name                       String?
  email                      String          @unique
  emailVerified              DateTime?
  image                      String?
  role                       UserRole        @default(BETA)
  timeLimit                  Int             @default(1800)
  currentPeriodRemainingTime Int             @default(1800)
  currentPeriodUsedTime      Int             @default(0)
  lastResetDate              DateTime        @default(now())
  accounts                   Account[]
  sessions                   Session[]
  Authenticator              Authenticator[]
  voiceNotes                 VoiceNote[]
  createdAt                  DateTime        @default(now())
  updatedAt                  DateTime        @updatedAt
  newsletterSubscribed       Boolean         @default(true)
  folders                    Folder[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Folder {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentFolder   Folder?          @relation("FolderToFolder", fields: [parentId], references: [id])
  parentId       String?
  subFolders     Folder[]         @relation("FolderToFolder")
  notesToFolders NotesToFolders[]

  @@index([userId])
  @@index([parentId])
}

model NotesToFolders {
  id        String   @id @default(cuid())
  folderId  String
  noteId    String
  createdAt DateTime @default(now())

  folder Folder    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  note   VoiceNote @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([folderId, noteId])
  @@index([folderId])
  @@index([noteId])
}

model VoiceNote {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now()) @map("created_at")
  modifiedAt    DateTime? @map("modified_at")
  fileName      String?
  transcription String
  tags          String[]
  duration      Int?
  userId        String

  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  folders NotesToFolders[]

  @@index([userId])
  @@map("voice_notes")
}

model NewsletterSubscriber {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  subscribed    Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastEmailSent DateTime?
}
